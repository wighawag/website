<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wighawag</title>
    <link>http://blog.wighawag.com/</link>
    <description>Recent content on wighawag</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Thu, 23 Jul 2015 10:36:05 +0100</lastBuildDate>
    <atom:link href="http://blog.wighawag.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>khage</title>
      <link>http://blog.wighawag.com/blog/2015/07/khage/</link>
      <pubDate>Thu, 23 Jul 2015 10:36:05 +0100</pubDate>
      
      <guid>http://blog.wighawag.com/blog/2015/07/khage/</guid>
      <description>&lt;p&gt;It has been a while again and it is time for a new post. This time again with Haxe. I was working lately on a library mainly used for games wrapping the webgl api and other browser js api into a potentially crossplatform api. The main interesting part from it was its use of a type safe wrapper arround glsl shaders.
It served me well and it was the first thing I wanted to port to my new destination : Kha.&lt;/p&gt;

&lt;p&gt;I have heard of Kha before the WWX2015 but did not bother try another framework. I had already a far better idea : write my own :D&lt;/p&gt;

&lt;p&gt;but this was untill I attended Robert&amp;rsquo;s speech and dived in Kha.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hxcpp extern</title>
      <link>http://blog.wighawag.com/blog/2014/12/hxcpp-extern/</link>
      <pubDate>Mon, 01 Dec 2014 10:36:05 +0100</pubDate>
      
      <guid>http://blog.wighawag.com/blog/2014/12/hxcpp-extern/</guid>
      <description>

&lt;h1 id=&#34;introduction:95526b837c261f1f491370c2a19f8b5a&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;To show the usefulness of &lt;a href=&#34;http://haxe.org&#34; title=&#34;Haxe Website&#34;&gt;Haxe&lt;/a&gt; at my company I have been working with hxcpp to compile a demo to both native using a C++ engine and Flash using a library that match the C++ engine api.&lt;/p&gt;

&lt;p&gt;I chose to use the latest haxe/hxcpp version so I can use the new extern facility provided by hxcpp. This simplify the cpp/haxe integration and allow to manipulate cpp object directly. The help from &lt;a href=&#34;http://gamehaxe.com/&#34; title=&#34;Hugh&#39;s website&#34;&gt;Hugh&lt;/a&gt; was invaluable to get my demo working.&lt;/p&gt;

&lt;p&gt;If you did not see it already there is Hugh&amp;rsquo;s  2014 haxe conference talk:&lt;/p&gt;

&lt;p&gt;slides &lt;a href=&#34;http://gamehaxe.com/2014/05/28/wwx2014-talk-hxcpp-magic/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;video &lt;a href=&#34;http://haxe.io/roundups/wwx/c++-magic/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The C++ engine I am working with takes full control of the main entry point and as such I could not use hxcpp to generate the full application binary. Instead I made use of the &lt;code&gt;-D static_link&lt;/code&gt; directive so hxcpp generate a static library that is then linked to the binary generated by the engine. This is quite nice since to make the complete executable, only linking is required once the engine main and hxcpp have done its job. This also means only hxcpp need to compile once the engine main has been compiled.&lt;/p&gt;

&lt;p&gt;There are quite few engine that take control of the main entry point like that and this is due to the way each platform manage an app (IOS/Android&amp;hellip;). So hopefully this article might help you integrate haxe with your engine.
In any case most of the thing I will talk about it here apply as well to other projects where hxcpp generate the app directly (you can skip the C++ to Haxe section as you might not need it at all in that case though).&lt;/p&gt;

&lt;p&gt;For this article I cannot show any of the engine code but basically to create a game in this engine you have the possibility to implement the required virtual function from a specific C++ abstract class. These functions are the entry points to your game specific code. There is a function for init(), one for update() and some more for events like touch events and resize and few other stuff. From there you can instantiate all the required cpp classes or services &amp;hellip;&lt;/p&gt;

&lt;p&gt;Since I cannot show you the C++ engine code I set up some c++ code that act in a similar fashion. I did not bother creating an abstract class but as you can guess it will work as well with such setup.&lt;/p&gt;

&lt;h1 id=&#34;requirements:95526b837c261f1f491370c2a19f8b5a&#34;&gt;Requirements&lt;/h1&gt;

&lt;p&gt;Before starting you will need to setup your development environment. This require few steps as we are using bleeding edge stuff:&lt;/p&gt;

&lt;p&gt;First of all you will need the latest haxe from &lt;a href=&#34;http://build.haxe.org&#34;&gt;http://build.haxe.org&lt;/a&gt;
I have been using the build from 13/11/2014 :&lt;/p&gt;

&lt;p&gt;for windows this is this one:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hxbuilds.s3-website-us-east-1.amazonaws.com/builds/haxe/windows-installer/haxe_2014-11-13_development_6b8dff1.tar.gz&#34;&gt;http://hxbuilds.s3-website-us-east-1.amazonaws.com/builds/haxe/windows-installer/haxe_2014-11-13_development_6b8dff1.tar.gz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will also need the latest hxcpp from git.
I have been using the following revision :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fb6e31af65564352060e4e4781d79f342f442161
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While you can clone it using git itself, I recommend doing it via haxelib:&lt;/p&gt;

&lt;p&gt;In order to install library hosted on a git repo  you can use the haxelib git command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;haxelib git &amp;lt;library-name&amp;gt; &amp;lt;git url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so for hxcpp this is the following :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;haxelib git hxcpp https://github.com/HaxeFoundation/hxcpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then you can update to the revision mentioned above&lt;/p&gt;

&lt;p&gt;Finally you will need to compile the haxe std library so it match your application. Normally hxcpp come with library already generated but for example for Windows since we use a specific runtime (MTd) we will need to rebuild the generated library from hxcpp
You will need first to go into the project folder of the hxcpp folder. hxcpp folder is located in the haxe library folder.
In unix system it is usually here :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; /usr/lib/haxe/lib/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Windows this is normally here :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; C:\HaxeToolkit\haxe\lib\
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so here since you want to go to the hxcpp folder installed via haxelib git and you want to go to the subfolder &amp;ldquo;project&amp;rdquo; you need to go at the following path:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; C:\HaxeToolkit\haxe\lib\hxcpp\git\project for windows

 /usr/lib/haxe/lib/hxcpp/git/project for unix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;there you execute the following command
for unix :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;neko build.n -debug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for windows :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;neko build.n -debug -DABI=-MTd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the debug flag is not necessary but allow you to debug inside the Haxe std generated by hxcpp&lt;/p&gt;

&lt;p&gt;One last thing I forgot to mention: you will need &lt;a href=&#34;http://www.cmake.org/&#34;&gt;cmake&lt;/a&gt; as I use it to generate the platform specific project files for the C++ code&lt;/p&gt;

&lt;p&gt;And this should be all for your environment setup&lt;/p&gt;

&lt;h1 id=&#34;the-demo:95526b837c261f1f491370c2a19f8b5a&#34;&gt;The Demo&lt;/h1&gt;

&lt;p&gt;Now you can grab the source code of the example at &lt;a href=&#34;https://github.com/wighawag/hxcpp-test&#34;&gt;https://github.com/wighawag/hxcpp-test&lt;/a&gt;
As said earlier, it does not use my company&amp;rsquo;s c++ engine but instead it use a simple setup where the main is not controlled by Haxe.&lt;/p&gt;

&lt;p&gt;The cpp folder contains the &amp;ldquo;engine code&amp;rdquo; with the required haxe cpp code.
the src folder contains the haxe code that will generate the static library in the &amp;ldquo;lib&amp;rdquo; folder (which will be linked to the binary generated by the &amp;ldquo;engine&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;the build.hxml have some directive you might be interested in :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-main Main #this is the main entry point of the static_library and its `static function main` will be executed first
-cpp lib # this is the folder to which the generated cpp and static library will be generated (named Main-debug.a/Main-debug.lib because of debug)
-cp src # this is the haxe source folder
-lib hxcpp # this is required to use hxcpp
-D static_link # as mentioned earlier this is required to generate a static library instead of an executable
-D ABI=-MTd # this is required on Windows. the &amp;quot;d&amp;quot; stand for debug
-debug # make it debug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can compile your static lib via the following command :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;haxe build.hxml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then for the c++ side we use cmake and for that I choose the following process (there might be better one):&lt;/p&gt;

&lt;p&gt;go in the cpp folder and create a build folder there (for the cmake generated files)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd cpp
mkdir build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then go inside that build folder and execute cmake:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd build
cmake ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will generate your project file in the build folder
For windows it will generate by default Visual Studio solution (you will need to set HaxeTest as your startup project and then you can start debugging&lt;/p&gt;

&lt;h1 id=&#34;c-to-haxe:95526b837c261f1f491370c2a19f8b5a&#34;&gt;C++ to Haxe&lt;/h1&gt;

&lt;p&gt;Since we do not control the main entry point we need the C++ code to call haxe code. Since we have only one haxe app running we can use static function for that direction (C++ -&amp;gt; Haxe). This map easily with the virtual function implementation of a main Abstract class.&lt;/p&gt;

&lt;p&gt;Here we do not have an abstract class in C++ and instead we call directly the haxe generated cpp. You can see the main cpp code here :
&lt;iframe width=&#34;100%&#34; height=&#34;100%&#34; src=&#34;http://script-iframe.appspot.com/script?url=http://gist-it.appspot.com/github/wighawag/hxcpp-test/blob/master/cpp/src/haxetest.cpp&#34;&gt;&lt;br /&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;In order to do that we need to add some haxe specific C++ code :&lt;/p&gt;

&lt;p&gt;First we need to put some haxe initialization call in the c++ side :
This require some declaration as you can see in the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extern &amp;quot;C&amp;quot; const char *hxRunLibrary();
extern &amp;quot;C&amp;quot; void hxcpp_set_top_of_stack();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then in the main we call these functions with checking for error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hxcpp_set_top_of_stack();
const char *err = hxRunLibrary();
if (err) {
  // Unhandled exceptions ...
  fprintf(stderr,&amp;quot;Error %s\n&amp;quot;, err );
  return -1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is pretty straight forward. in your engine if you do not control the main you can put it in your init function for example&lt;/p&gt;

&lt;p&gt;The second thing to do is to declare the haxe App static function interface :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class App_obj{
  public:
    static int init(int value);
    static int update(::cpp::Pointer&amp;lt;Rectangle&amp;gt; rect);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This directly map to the haxe class App defined as shown here :&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;100%&#34; src=&#34;http://script-iframe.appspot.com/script?url=http://gist-it.appspot.com/github/wighawag/hxcpp-test/blob/master/src/App.hx&#34;&gt;&lt;br /&gt;&lt;/iframe&gt;

&lt;p&gt;the following declaration allow you to define a specific instance which will be call for each static function&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static var instance:AppInstance;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you just need to set the following as your main static function :&lt;/p&gt;

&lt;p&gt;static public function main():Void{  App.instance = new Main(); }&lt;/p&gt;

&lt;p&gt;Please note that hxcpp append &lt;code&gt;&amp;quot;_obj&amp;quot;&lt;/code&gt; to every haxe class generated to cpp. That is why the declaration above mentioned &lt;code&gt;&amp;quot;App_obj&amp;quot;&lt;/code&gt; and not just &lt;code&gt;&amp;quot;App&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since in the App_obj declaration use the ::cpp::Pointer type we need to declare it as well :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace cpp{
  template&amp;lt;typename T&amp;gt;
  class Pointer{
    public:
      T *ptr;
      inline Pointer(const T *inValue) : ptr((T*)inValue) { }
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is more to this type but we just declare what we are using.&lt;/p&gt;

&lt;p&gt;You might be wandering why do we need to duplicate the declaration that should already exist somewhere in the hxcpp generated cpp?
Actually in this particular example it might have worked but in the C++ engine I use, the hxcpp header were conflicting with some of the engine headers. I forgot the exact reason but it might be due to some shared typdef? So Instead I duplicate the headers that I need. This should not be much more that what I have here.&lt;/p&gt;

&lt;p&gt;Once you have the declaration setup, you can make your call:&lt;/p&gt;

&lt;p&gt;Here I did not bother to make a proper engine and i just call init() followed by update on only once but this should be pretty straightforward to extend:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;::App_obj::init(1);
::App_obj::update(::cpp::Pointer&amp;lt;Rectangle&amp;gt;(rect));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is pretty much it for having your haxe code run from the c++ engine&lt;/p&gt;

&lt;h1 id=&#34;haxe-to-c:95526b837c261f1f491370c2a19f8b5a&#34;&gt;Haxe to C++&lt;/h1&gt;

&lt;p&gt;In order to go the other way (Haxe -&amp;gt; C++) we can use the latest &amp;ldquo;extern&amp;rdquo; feature of hxcpp. This is far better than the old &lt;a href=&#34;http://old.haxe.org/doc/cpp/ffi&#34;&gt;cffi&lt;/a&gt; which allowed only static function to be called. If you prefer though, you can still use it.&lt;/p&gt;

&lt;p&gt;The way it works is similar to other targets except there is few gotchas.&lt;/p&gt;

&lt;p&gt;You declare your extern as usual with some extera metadata:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@:structAccess
@:include(&amp;quot;Rectangle.h&amp;quot;)
@:native(&amp;quot;Rectangle&amp;quot;)
extern class Rectangle{
    public function set_values(w : Int, h : Int) : Void;
    public function area() : Int;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@:structAccess need to be there so that hxcpp use the &amp;ldquo;.&amp;rdquo; operator instead of e the &amp;ldquo;-&amp;gt;&amp;rdquo; operator&lt;/p&gt;

&lt;p&gt;By the way, @:unreflective might be necessary in some case so hxcpp do not generate Dynamic access to the class. Do not need it here for Rectangle though.&lt;/p&gt;

&lt;p&gt;the @:include metadata will inject the include directive in every cpp file generated that need  that extern.&lt;/p&gt;

&lt;p&gt;the @:native tell hxcpp the name (including namespace if provided) of the class. Here it is require as the extern live in the &amp;ldquo;engine&amp;rdquo; package and without that hxcpp would add use a namespace &amp;ldquo;engine&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I also added an Include.hx file which add some information to hxcpp so it can find the header files included:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@:buildXml(&amp;quot;
&amp;lt;files id=&#39;haxe&#39;&amp;gt;
  &amp;lt;compilerflag value=&#39;-I../cpp/include&#39;/&amp;gt;
&amp;lt;/files&amp;gt;
&amp;lt;files id=&#39;__lib__&#39;&amp;gt;
  &amp;lt;compilerflag value=&#39;-I../cpp/include&#39;/&amp;gt;
&amp;lt;/files&amp;gt;
&amp;quot;)
@:keep class Include{

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;both &lt;code&gt;haxe&lt;/code&gt; and &lt;code&gt;__lib__&lt;/code&gt; section are required. the &lt;code&gt;__lib__&lt;/code&gt; is used as we compile it to a static library. I could not find documentation about it though.&lt;/p&gt;

&lt;p&gt;the @:keep is to make sure the class is used (so that hxccp use its info) even if not declared anywhere.&lt;/p&gt;

&lt;p&gt;Once you have the extern and the extra information for hxcpp you can use the class as an Haxe object.&lt;/p&gt;

&lt;p&gt;Here I directly use the Rectangle header file but since some of my engine headers had conflict with hxcpp I had to duplicate the problematic header for hxcpp to know about the required type in a similar way than described in the c++ -&amp;gt; haxe section. You might need to do that as well.&lt;/p&gt;

&lt;p&gt;Another thing though is that you will probably want to pass pointers to haxe. In that case you will need the cpp.Pointer class and the corresponding ::cpp::Pointer, the same I use for the Rectangle instance that I pass to the update method.&lt;/p&gt;

&lt;p&gt;With pointer you have to be careful as haxe do not modify the semantics of the cpp pointer. As such it modify Haxe semantic a bit:&lt;/p&gt;

&lt;p&gt;When you have a cpp.Pointer in haxe code, if you access the value/ref member and store it in a variable. that variable will contain &lt;strong&gt;a copy&lt;/strong&gt; of the value pointed by the pointer and not the reference. If you want to manipulate the object you have to alway use the ref inline. You can think of &amp;ldquo;ref&amp;rdquo; as the &amp;ldquo;-&amp;gt;&amp;rdquo; of cpp.&lt;/p&gt;

&lt;p&gt;If you take a look at App.hx you can see :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rect.ref.set_values(4,200);
instance.update(rect.ref.area());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ref is used so the actual rect is modified and its area method called apropriately.&lt;/p&gt;

&lt;p&gt;hxcpp could probably improve on this. Or a macro could be done to generate some code to avoid the issue: it could generate an error on assigning ref to a variable for example.&lt;/p&gt;

&lt;p&gt;To be clear the following will set values on a copy and thus the area passed to function will not be the expected one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var actualRect = rect.ref;
actualRect.set_values(4,200);
instance.update(rect.ref.area ());
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusion:95526b837c261f1f491370c2a19f8b5a&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;There is probably a lot more to be said on the hxcpp extern integration but that would be all for now. If you knew already about cffi, I suppose this new extern facility should look like a big improvement. The integration process while not as seemless as flash/java target, it is not very hard neither. Maybe we could generate the extern from the header files directly. In any case, I hope you got some learning from reading and that you will deep into haxe/hxcpp to explore more. Thank you for reading. If you have any questions, do not hesitate to put a comment.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NME Stage3D support</title>
      <link>http://blog.wighawag.com/blog/2012/12/nme-stage3d-support/</link>
      <pubDate>Mon, 31 Dec 2012 16:26:02 +0100</pubDate>
      
      <guid>http://blog.wighawag.com/blog/2012/12/nme-stage3d-support/</guid>
      <description>&lt;p&gt;Hi everybody, long time I did not write a post,&lt;/p&gt;

&lt;p&gt;During that time I learnt a wonderful language, &lt;a href=&#34;haxe.org&#34;&gt;Haxe&lt;/a&gt;. I have still lot to learn thought. I don&amp;rsquo;t want to go in the details of why this language (or more accurately its ecosystem) is awesome but as an Actionscript developer for the last 3 years, there is no question to switch back. Haxe offer everything that actionscript has to offer (compiling to swf including air) + many extra feature&lt;/p&gt;

&lt;p&gt;The ones I like the most are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generics,&lt;/li&gt;
&lt;li&gt;Typed function&lt;/li&gt;
&lt;li&gt;and Macros (which I still have to practice more)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also like that the compiler is very fast (compared to mxmlc) and it handle Type inference, no need to repeat yourself like in actionscript&lt;/p&gt;

&lt;p&gt;But the main advantage is that Haxe can compile to other languages. The current stable ones being swf, javascript, php, c++ and neko (a virtual machine that I did not use much except for writing tools and for using Macros (as they run on this virtual machine).&lt;/p&gt;

&lt;p&gt;This not only means that you can get your code working on android, ios, blackberry, linux, mac os x, windows, webos but also that you can share code between client and server&lt;/p&gt;

&lt;p&gt;If I find some time I would like to make a Python target myself but as of now this is unlikely to happen&lt;/p&gt;

&lt;p&gt;The other great thing about Haxe is its community, they are doing a great job with Haxe itself (haxe 3 in the making) and with great libraries (&lt;a href=&#34;http://www.nme.io/&#34;&gt;NME&lt;/a&gt;, &lt;a href=&#34;https://github.com/aduros/flambe&#34;&gt;Flambe&lt;/a&gt;, &lt;a href=&#34;https://github.com/jdonaldson/promhx&#34;&gt;Promhx&lt;/a&gt;,.,) and quick to reply to questions&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get back on the topic. I am writing this post to share the last work I did regarding Haxe and maybe this will contribute to the community..&lt;/p&gt;

&lt;p&gt;I am currently working on a game engine which I plan to use for mobile game as well as web based game (thanks to Haxe of course :)&lt;/p&gt;

&lt;p&gt;I have a renderer agnostic api and until the last few days I was using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flambe 1.2 (only its rendering part) to render stuff on Flash (using stage3d and bitmap renderer as a fallback)&lt;/li&gt;
&lt;li&gt;NME Tilesheet API for cpp target (testing only linux and android)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then I started to implement a tile map and as soon as I started to add many tiles, my old android phone (an HTC magic upgraded to androdi 2.3) could not display anything,&lt;/p&gt;

&lt;p&gt;The reason was not Tilesheet performance (using GPU) per se but the fact that in order to update the position of the tiles while scrolling, the CPU (not the GPU) could not handle the many tile. Of course there were lots of optimization possible as I was using a quite high level API but this problem made me think that it would be nice if I could use the GPU myself directly so that I can save my vertex buffer at the beginning and at each frame I would just need to update the view matrix.
Actually maybe there was a nice way to achieve the same with tilesheet API ?&lt;/p&gt;

&lt;p&gt;Anyway, just in time came NME 3.5.1 with support for OpenGLView&lt;/p&gt;

&lt;p&gt;I jumped on it and learn OpenGL on the way to realize that it should not be too difficult to implement the Stage3D API for NME&lt;/p&gt;

&lt;p&gt;So here it is &lt;a href=&#34;https://github.com/wighawag/NME/tree/stage3d&#34;&gt;https://github.com/wighawag/NME/tree/stage3d&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is still not fully working as flash Stage3D is. here is a partial list of the issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;there is no support for multiple textures yet&lt;/li&gt;
&lt;li&gt;(Index/Vertex)Buffer can only be uploaded from ByteArray as of now (it might be straigthforward to make it work with Vector though)&lt;/li&gt;
&lt;li&gt;for Context3D here are the following issues:&lt;/li&gt;
&lt;li&gt;Context3D.setCulling is not tested&lt;/li&gt;
&lt;li&gt;Context3D.setDepthTest not woking  (Currentlty the constants for the Depth test are not set in the opengl API provided in NME)&lt;/li&gt;
&lt;li&gt;Context3D.configureBackBuffer does not take in consideration antiAlias and enableDepthAndStencil arguments&lt;/li&gt;
&lt;li&gt;Context3D.createCubeTexture not implemented&lt;/li&gt;
&lt;li&gt;Context3D.createTexture does not consider Format, optimizeForRenderToTexture and streamingLevels arguments&lt;/li&gt;
&lt;li&gt;Context3D.drawToBitmapData not implemented&lt;/li&gt;
&lt;li&gt;Context3D.setProgramConstantsFromByteArray not implemented&lt;/li&gt;
&lt;li&gt;Context3D.setProgramConstantsFromVector not implemented&lt;/li&gt;
&lt;li&gt;Context3D.setRenderToBackBuffer not implemented&lt;/li&gt;
&lt;li&gt;Context3D.setRenderToTexture not implemented&lt;/li&gt;
&lt;li&gt;Context3D.setScissorRectangle not implemented&lt;/li&gt;
&lt;li&gt;Context3D.setStencilActions not implemented&lt;/li&gt;
&lt;li&gt;Context3D.setStencilReferenceValue not implemented&lt;/li&gt;
&lt;li&gt;probably many thing I forgot&lt;/li&gt;
&lt;li&gt;since the openGL api used in NME does not allow direct call to render, you need to set a render function. This is achieved by passing a function to Contex3D.setRenderMethod (which does not exist in flash). To be as close as possible to flash Stage3D I should probably allow to render in Event.ENTER_FRAME or any timer. But this would require to cache the calls made to context3D and replay them when the openGL API call the render function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anyway the main drawback currently is that since Stage3D and opengl use different shader language you still need to code your shader in two languages. Also regarding GLSL, since I wanted to use Stage3D api which does not support arbitrary name for attributes and uniforms, you have to use the same convention as AGAL (vc0, vc1 for vertex uniforms, va0, va1.. for vertex attribute, &amp;hellip;etc&amp;hellip;) as attribute and uniform name in GLSL&lt;/p&gt;

&lt;p&gt;The best solution here would be to extend &lt;a href=&#34;http://haxe.org/manual/hxsl&#34;&gt;HXSL&lt;/a&gt; and use it to have only one language for both Stage3D and GLSL but I did not look into that. I know there were some work on a GLSL target for HXSL but I don&amp;rsquo;t know what is the state of this as of now, Any info ?&lt;/p&gt;

&lt;p&gt;I will porbably look into it when I ll need more complex shader stuff.&lt;/p&gt;

&lt;p&gt;I plan to continue working on this Stage3D port and I would be very glad if it could be included in NME trunk so my work do not get lost as a patch file.  I ll probably do a pull request even if it s still not perfect)&lt;/p&gt;

&lt;p&gt;I posted a test here  &lt;a href=&#34;https://github.com/wighawag/NMEStage3DTest&#34;&gt;https://github.com/wighawag/NMEStage3DTest&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&#34;500&#34; height=&#34;500&#34; src=&#34;http://www.wighawag.com/blog/content/NMEStage3DTest.html&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;It should work in Flash without my new version of NME
And the patch provided &lt;a href=&#34;https://raw.github.com/wighawag/NMEStage3DTest/master/stage3d.patch&#34;&gt;here&lt;/a&gt; should make it work in cpp (tested only on Linux 64 bit by the way)&lt;/p&gt;

&lt;p&gt;You ban also clone my NME fork if you prefer and checkout the &amp;ldquo;stage3d&amp;rdquo; branch&lt;/p&gt;

&lt;p&gt;Let me know what you think and if some of you already started some similar work, let&amp;rsquo;s cooperate.&lt;/p&gt;

&lt;p&gt;All the best for the coming new year!&lt;/p&gt;

&lt;p&gt;We survived the end of the world so let&amp;rsquo;s celebrate apropriately :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Profiler Injection With MixingLoom as3commons bytecode and Flash Preloader</title>
      <link>http://blog.wighawag.com/blog/2011/06/profiler-injection-with-mixingloom-as3commons-bytecode-and-flash-preloader/</link>
      <pubDate>Sun, 05 Jun 2011 16:26:20 +0100</pubDate>
      
      <guid>http://blog.wighawag.com/blog/2011/06/profiler-injection-with-mixingloom-as3commons-bytecode-and-flash-preloader/</guid>
      <description>

&lt;h3 id=&#34;introduction:7f7dc6812c7bbeec4c326bca656ef8ab&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Recently I discovered &lt;strong&gt;MixingLoom&lt;/strong&gt; through &lt;a href=&#34;http://www.jamesward.com/2011/04/26/introducing-mixing-loom-runtime-actionscript-bytecode-modification/&#34;&gt;James Ward&amp;rsquo;s article&lt;/a&gt;, it is a library to ease the injection of code in swf. One usage of it is &lt;a href=&#34;http://en.wikipedia.org/wiki/Aspect-oriented_programming&#34;&gt;Aspect Oriented Programming&lt;/a&gt; to separate logging, analytics&amp;hellip; from the actual application code by injecting the extra code (logging, analytics&amp;hellip;)  into the swf after compilation (thanks to &lt;a href=&#34;http://www.as3commons.org/as3-commons-bytecode/index.html&#34;&gt;as3commons-bytecode library&lt;/a&gt; ). This way the extra code does not appear anywhere in the application source code which stay focused on what it should do.&lt;/p&gt;

&lt;p&gt;Here I ll show you how to inject profiler code to measure the speed of execution of particular functions. An xml file read at run time would be used to specify which function to profile (and to inject). It can be used for other purpose as well but since currently it does not handle arguments except for 1 string argument, it is quite limited.&lt;/p&gt;

&lt;h3 id=&#34;preloader:7f7dc6812c7bbeec4c326bca656ef8ab&#34;&gt;Preloader&lt;/h3&gt;

&lt;p&gt;Since I did not want to use flex at all, I could not use the example in James&amp;rsquo; article which use the MixingLoom flex preloaders.&lt;/p&gt;

&lt;p&gt;Instead I used the built-in flash preloader, the one you specify through mm.config property (see &lt;a href=&#34;http://jpauclair.net/2010/02/17/one-swf-to-rule-them-all-the-almighty-preloadswf/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://philippe.elsass.me/2010/09/as3-hacking-preloadswf-for-fun-and-profit/&#34;&gt;here&lt;/a&gt; ) it is a preloader preloaded by flash itself before anything is loaded. It allows us to execute code at the point where the main class is loaded.&lt;/p&gt;

&lt;p&gt;This basically allow injection of code to any swf (whether it has been compiled by you or not). I had  some problem though making the profiler injection work when the swf is compiled in release mode. (see that later)&lt;/p&gt;

&lt;p&gt;here is the preloader abstract class I use :&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;100%&#34; src=&#34;http://script-iframe.appspot.com/script?url=http://gist-it.appspot.com/github/wighawag/mixingloom-profiler/raw/master/src/com/wighawag/preloader/AS3AbstractPreloader.as&#34;&gt;&lt;br /&gt;&lt;/iframe&gt;

&lt;p&gt;This abstract preloader need to be extended so that it is able to inject code into the application code. This can done by overriding  &lt;strong&gt;applyModifications&lt;/strong&gt;  and then call &lt;strong&gt;modificationsApplied&lt;/strong&gt; with the modified loaded bytes&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;modificationsApplied&lt;/strong&gt; receive an event containing the modified application (the event can come directly from MixingLoom ModifiedByteLoader or PatcherApplierImpl (who reload the modified byte into flash).&lt;/p&gt;

&lt;p&gt;The abstract preloader then add it to the stage.&lt;/p&gt;

&lt;p&gt;In fact the abstract preloader will also remove everything from the stage so that it start clean and does not have two application running at the same time.&lt;/p&gt;

&lt;p&gt;Unfortunately, in many applications (since in most case, the main class is not supposed to be removed from stage) the main class has event listener registered with the stage which are not automatically removed when the main instance is removed from the stage. Because of that even if the main class is removed from stage the listener will keep the main class instance in memory and will be executed.&lt;/p&gt;

&lt;p&gt;If you are the author of the application, you can simply unregister listener on REMOVED_FROM_STAGE event.&lt;/p&gt;

&lt;p&gt;If you have no control over the code, then I do not know the solution, except maybe by analysing the swf bytecode to find listerner registration (a probably complex task) and unregister them.&lt;/p&gt;

&lt;p&gt;The problem come from the built-in preloader : as soon as the main application is loaded it is instantiated and added to stage. It seems we do not have a hook before that happened.&lt;/p&gt;

&lt;p&gt;If anyone has a solution for it let me know.&lt;/p&gt;

&lt;p&gt;Note : This abstract preloader can be extended for any purpose including non-mixingloom/injection one&lt;/p&gt;

&lt;h3 id=&#34;setting-up-mixingloom:7f7dc6812c7bbeec4c326bca656ef8ab&#34;&gt;Setting up MixingLoom&lt;/h3&gt;

&lt;p&gt;Apart from having to re-hook the preloading part I also had to deal with the patchers and byte injection myself. Indeed James in his article use MixingLoom preloader which take care of applying the patch specified on the constructor through the flex specific code.&lt;/p&gt;

&lt;p&gt;Thanks to MixingLoom it is just a matter of instantiating an IPatcherApplier and passing a vector of patchers&lt;/p&gt;

&lt;p&gt;And thanks to the abstract preloader, I just needed to override &lt;strong&gt;applyModifications&lt;/strong&gt; and call &lt;strong&gt;modificationsApplied&lt;/strong&gt; when the patchers are applied (by setting the applier callback)&lt;/p&gt;

&lt;p&gt;I created another abstract preloader extending the preceding one to deal specifically with patchers and applier:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;100%&#34; src=&#34;http://script-iframe.appspot.com/script?url=http://gist-it.appspot.com/github/wighawag/mixingloom-profiler/raw/master/src/com/wighawag/preloader/AS3AbstractPatcherPreloader.as&#34;&gt;&lt;br /&gt;&lt;/iframe&gt;

&lt;p&gt;It just instantiate an PatcherApplierImp and override &lt;strong&gt;applyModifications&lt;/strong&gt; to save the bytes that need to be modified and then expect its subclass to call &lt;strong&gt;applyPatchers&lt;/strong&gt; with a list of patchers passed as argument&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;applyPatchers&lt;/strong&gt;  then add the list of patchers to the applier and set &lt;strong&gt;modificationsApplied&lt;/strong&gt; to be the callback of the applier. The applier is then applied.&lt;/p&gt;

&lt;p&gt;To extend the abstract class, the only neccessary bit is then to call &lt;strong&gt;applyPatchers&lt;/strong&gt; with a list of patchers.&lt;/p&gt;

&lt;h3 id=&#34;injection:7f7dc6812c7bbeec4c326bca656ef8ab&#34;&gt;Injection&lt;/h3&gt;

&lt;p&gt;Now that we have all the framework in place we can see an actual implementation of these abstract classes:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;100%&#34; src=&#34;http://script-iframe.appspot.com/script?url=http://gist-it.appspot.com/github/wighawag/mixingloom-profiler/raw/master/src/MixingLoomAS3Preloader.as&#34;&gt;&lt;br /&gt;&lt;/iframe&gt;

&lt;p&gt;As you can see instead of dealing with xml loading in the patchers (as in Jame&amp;rsquo;s example) I deal with them outside. This allow the patchers to focus on their actual work and also allow me to deal with loading failure directly in the preloader without requiring the patchers to tell us what happened.&lt;/p&gt;

&lt;p&gt;on success the patchers are instantiated with the xml data and &lt;strong&gt;applyPatchers&lt;/strong&gt; is called&lt;/p&gt;

&lt;p&gt;on failure the patchers are not applied and it show an error message.&lt;/p&gt;

&lt;p&gt;In both case I then add a console to the stage (in &lt;strong&gt;xmlFailed&lt;/strong&gt; or &lt;strong&gt;modificationApplied&lt;/strong&gt;). This &lt;a href=&#34;http://code.google.com/p/flash-console/&#34;&gt;flash-console&lt;/a&gt; is very useful to see what is going on and will allow us here to see the profiling results. It also allow to execute code dynamically through a command line interface. check it out.&lt;/p&gt;

&lt;p&gt;If you noticed I imported com.wighawag.profiler.TimeProfiler but it is not used. I referenced it directly so that it is imported in the final swf.&lt;/p&gt;

&lt;p&gt;This way I make sure I have this class compiled in when it is used by the injection.
Basically for each class method you want to inject you need it to be compiled in either in the preloader or in the swf target of the injection. In this project case I did not want the profiler to be part of the targeted swf instead I wanted the targeted swf to be clean of any profiling code or libraries.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s discuss the actual patcher : &lt;strong&gt;MethodCallWrapperPatcher&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The class is here:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;100%&#34; src=&#34;http://script-iframe.appspot.com/script?url=http://gist-it.appspot.com/github/wighawag/mixingloom-profiler/raw/master/src/com/wighawag/injection/patcher/MethodCallWrapperPatcher.as&#34;&gt;&lt;br /&gt;&lt;/iframe&gt;

&lt;p&gt;its constructor expect xml data (not a url since it does not deal with loading). This xml data specify which method to inject and where&lt;/p&gt;

&lt;p&gt;the apply function is the main method and looks quite similar to the SampleXMLPatcher of James except that it look for every tag (making it slower but make it potentially work for realeased swf)&lt;/p&gt;

&lt;p&gt;Then for each class and for each of their instance it look whether their instance are specified as targets in the xml.
If so, it inject the source classes&amp;rsquo; methods (so in this case it will inject the &lt;strong&gt;com.wighawag.profiler.TimeProfiler&lt;/strong&gt; methods &amp;ldquo;start&amp;rdquo; and &amp;ldquo;finish&amp;rdquo; )&lt;/p&gt;

&lt;p&gt;to do the actual injection I use &lt;strong&gt;MethodCallWrapper&lt;/strong&gt; which can inject one method at the beginning of a method body and another method at the end (before every return)&lt;/p&gt;

&lt;p&gt;Like this it can profile the time it takes to execute the function.&lt;/p&gt;

&lt;p&gt;this methodCallWrapper takes two MethodCall which a list of argument &lt;strong&gt;(currently only string arguments are accepted and only the first one will be taken in account)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is the code:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;100%&#34; src=&#34;http://script-iframe.appspot.com/script?url=http://gist-it.appspot.com/github/wighawag/mixingloom-profiler/raw/master/src/com/wighawag/injection/injector/MethodCallWrapper.as&#34;&gt;&lt;br /&gt;&lt;/iframe&gt;

&lt;p&gt;As you can see it follows the same template as the MixingLoom example: it does not change the byte before the pushscope opcode.&lt;/p&gt;

&lt;p&gt;then it inject the first  MethodCall with the argument being the function being injected (so that the profile function knwo which function is beign measured)&lt;/p&gt;

&lt;p&gt;Then it incrase the maxStack value so that even if the next method call is between a push opcode and a return opcode, the push opcode created by the method call will not exceed the maxStack (if it does, the flash player throw a Verify Error).
It is probably possible instead of injecting the methodcall just before the return to detect where the last push opcode (used by the return opcode) is located and inject the methodcall just before it but it was easier to just increase the maxStack.&lt;/p&gt;

&lt;p&gt;then for each return opcode, it inject the second MethodCall and return the position in the method body after injection so that we can chain injections&lt;/p&gt;

&lt;p&gt;The MethodCall injector is as follow:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;100%&#34; src=&#34;http://script-iframe.appspot.com/script?url=http://gist-it.appspot.com/github/wighawag/mixingloom-profiler/raw/master/src/com/wighawag/injection/injector/MethodCall.as&#34;&gt;&lt;br /&gt;&lt;/iframe&gt;

&lt;p&gt;It is similar to the MixingLoom method call injection except that it adds a string argument through a pushstring opcode&lt;/p&gt;

&lt;p&gt;Again, after injecting it returns the position after the injection.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it. Normally it should work with application compiled in release mode but I get the error : &lt;strong&gt;Cpool index 0 is out of range 47.&lt;/strong&gt; when the method call execute.
If I do not add the string as argument to the call, it execute fine.
I checked the as3commons-bytecode code and it correctly add the string to the constant pool so I do not know what is wrong. any ideas?&lt;/p&gt;

&lt;p&gt;In debug everything is fine&lt;/p&gt;

&lt;p&gt;the code is located at &lt;a href=&#34;https://github.com/wighawag/mixingloom-profiler&#34;&gt;github&lt;/a&gt;
By the way, since the code shown in this page is dynamically taken from the github code, it is up to date&lt;/p&gt;

&lt;p&gt;To show it works I created an example project at &lt;a href=&#34;https://github.com/wighawag/mixingloom-profiler-example&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;100%&#34; src=&#34;http://www.wighawag.com/blog/content/mixingloomprofilerexample.swf&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;it has 4 button and 4 numeric stepper (from  &lt;a href=&#34;https://github.com/wighawag/minimalcomps&#34;&gt;minimalcomps&lt;/a&gt;, actually a fork since there is issues with instance variables set at the class level , _maximum and _minimum in this case. I did not have time to investigate but it made me think that using mm.config preloader is not a very good idea even if it theorically allow you to profile any swf on the net.&lt;/p&gt;

&lt;p&gt;the first button execute a recursive implementation of fibonacci for the value specified in the numeric stepper
By adding the path to the method in the xml, you ll see how long it takes to compute it in the console.&lt;/p&gt;

&lt;p&gt;The second button execute an non-recursive implementation of fibonacci. It is also profiled assuming you use the provided injection xml.&lt;/p&gt;

&lt;p&gt;the third and fourth button are not meant to be profiled since a wrapper function already profile it.
The time is shown next to the steppers. This allow  to see how the profiling injection affect the execution speed of the function injected.&lt;/p&gt;

&lt;p&gt;you can download the compiled profiler &lt;a href=&#34;http://blog.wighawag.com/blog/content/MixingloomPreloader.swf&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To see the profiling at work you need to edit your mm.config (see here) so that the flash preload your profiler&lt;/p&gt;

&lt;p&gt;for example if the preloader has been downloaded in C:/Applications (you also need to add this path to the the trusted locations in &lt;a href=&#34;http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html&#34;&gt;flash config&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;you can use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PreloadSwf=C:/Applications/MixingLoomPreloader.swf?xmlUrl=methodCallWrapperInjections.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the file &lt;strong&gt;methodCallWrapperInjections.xml&lt;/strong&gt; is located in the bin fodler to which the url is relative:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;100%&#34; src=&#34;http://script-iframe.appspot.com/script?url=http://gist-it.appspot.com/github/wighawag/mixingloom-profiler-example/raw/master/bin/methodCallWrapperInjections.xml&#34;&gt;&lt;br /&gt;&lt;/iframe&gt;

&lt;p&gt;it specify which function to profile including the fibonacci methods&lt;/p&gt;

&lt;p&gt;You may have to download the &lt;a href=&#34;http://blog.wighawag.com/blog/content/mixingloomprofilerexample.swf&#34;&gt;targeted swf&lt;/a&gt; to make it work and launch it directly (not sure if it works with browsers by default for example, I could not make it work with chrome)&lt;/p&gt;

&lt;p&gt;And as you can see, the recursive fibonacci already slow in flash is even more slower with the profiling enabled. This is because the profiling function is called for each recursion and function call in flash is slow.&lt;/p&gt;

&lt;p&gt;the code:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;100%&#34; src=&#34;http://script-iframe.appspot.com/script?url=http://gist-it.appspot.com/github/wighawag/mixingloom-profiler-example/raw/master/src/Main.as&#34;&gt;&lt;br /&gt;&lt;/iframe&gt;

&lt;p&gt;The post have been longer (both in time to write and text length) than I thought and I hope it is clear enough.&lt;/p&gt;

&lt;p&gt;Thank you for reading! Do not hesitate to leave comments&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>